// 1820.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

/*
【题目描述】
我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所 处位置的（值减1）为指数，以10为底数的幂之和的形式。
例如，123可表示为1*10^2+2*10^1 +3*10^0这样的形式。

与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位 置的（值-1）为指数，以2为底数的幂之和的形式。
一般说来，任何一个正整数R或一个负整数-R都可以被选来作为一个数制系统的基数。
如果是以R或-R为基数，则需要用到的数码为0，1,....R-1。例如，当R=7时，所需用到的数码是0，1，2, 3，4，5和6，这与其是R或-R无关。
如果作为基数的数绝对值超过10，则为了表 示这些数码，通常使用英文字母来表示那些大于9的数码。
例如对16进制数来说，用A 表示10，用B表示11，用C表示12，用D表示13，用E表示14，用F表示15。
在负进制数中是用-R作为基数，例如-15（＋进制）相当于110001（-2进制），

并且它可以被表示为2的幂级数的和数： 110001=1*(-2)^5+1*(-2)^4+0*(-2)^3+0*(-2)^2+0*(-2)^1+1*(-2)^0

问题求解:

设计一个程序，读入一个十进制数的基数和一个负进制数的基数，并将此十进制数转换为此负进制下的数：-R∈{-2，-3，-4,....-20}

【输入】
输入的每行有两个输入数据。

第一个是十进制数N（-32768≤N≤32767）; 第二个是负进制数的基数-R。

【输出】
输出此负进制数，若此基数超过10，则参照16进制的方式处理。

【输入样例】
30000 -2
-20000 -2
28800 -16
-25000 -16
【输出样例】
1101101010111000
1111011000100000
19180
7FB8

*/

#include <iostream>
#include <math.h>
using namespace std;
int main()
{
	int num, radix;

	cin >> num >> radix;

	int absNum = abs(num);
	int absRadix = abs(radix);

	int position = 0;
	int value = pow(radix, position);v

	while (value < num) {
		position++;
	}
}
